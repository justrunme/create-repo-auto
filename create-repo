#!/bin/bash

# üåü –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: Git
if ! command -v git &>/dev/null; then
  echo "‚ùå Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ: sudo apt install git"
  exit 1
fi

# üìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
current_dir=$(basename "$PWD")
echo "üìÅ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: $current_dir"

read -p "üî§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $current_dir): " repo
repo=${repo:-$current_dir}

# üîÄ GitHub –∏–ª–∏ GitLab
read -p "üåê –ì–¥–µ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π? (github/gitlab, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: github): " platform
platform=${platform:-github}

# üõ†Ô∏è Git init
if [ ! -d .git ]; then
  git init
  git checkout -b main
else
  echo "üîÅ Git —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."
  git checkout main 2>/dev/null || git checkout -b main
fi

# README
[ ! -f README.md ] && echo "# $repo" > README.md && echo "üìÑ README.md —Å–æ–∑–¥–∞–Ω."

# .gitignore
if [ ! -f .gitignore ]; then
  echo "ü§ñ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞..."
  if ls *.tf &>/dev/null || [ -f main.tf ]; then
    template="terraform"
  elif [ -f package.json ]; then
    template="node"
  elif ls *.py &>/dev/null || [ -f requirements.txt ] || [ -d .venv ]; then
    template="python"
  elif ls *.java &>/dev/null || [ -f pom.xml ] || [ -f build.gradle ]; then
    template="java"
  else
    template="none"
  fi

  case $template in
    python) echo -e "__pycache__/
*.py[cod]
*.egg-info/
.env
.venv" > .gitignore ;;
    node) echo -e "node_modules/
dist/
.env
npm-debug.log" > .gitignore ;;
    java) echo -e "*.class
*.jar
*.war
*.log
target/" > .gitignore ;;
    terraform) echo -e ".terraform/
*.tfstate
*.backup
crash.log" > .gitignore ;;
    none) touch .gitignore ;;
  esac
  echo "‚úÖ .gitignore —Å–æ–∑–¥–∞–Ω –¥–ª—è: $template"
fi

# Git add + commit
git add .
if git diff --cached --quiet; then
  echo "‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞."
else
  git commit -m "Initial commit"
fi

# ‚ñ∂Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if [[ "$platform" == "gitlab" ]]; then
  # GitLab API
  if [ -z "$GITLAB_TOKEN" ]; then
    echo "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GITLAB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ—ë: export GITLAB_TOKEN=your_token"
    exit 1
  fi

  echo "üì° –°–æ–∑–¥–∞—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitLab..."
  response=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN"     --data "name=$repo"     https://gitlab.com/api/v4/projects)

  git_url=$(echo "$response" | grep -oP '"ssh_url_to_repo":"\K[^"]+')
  if [ -z "$git_url" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitLab:"
    echo "$response"
    exit 1
  fi

  git remote add origin "$git_url"
  git push -u origin main
  echo "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω: $git_url"

else
  # GitHub (—á–µ—Ä–µ–∑ gh)
  if ! command -v gh &>/dev/null; then
    echo "üõ†Ô∏è GitHub CLI (gh) –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    sudo apt update && sudo apt install -y gh
  fi

  if ! gh auth status &>/dev/null; then
    echo "üîê GitHub CLI –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω–∏: gh auth login"
    exit 1
  fi

  echo "üåê –°–æ–∑–¥–∞—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub..."
  gh repo create "$repo" --source=. --public --push
  user=$(gh auth status --show-token 2>/dev/null | grep -oP '(?<=as ).*')
  echo "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/${user:-your-username}/$repo"
fi

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ—Å–ª–µ–∂–µ–Ω–∏–µ
echo "$PWD" >> ~/.repo-autosync.list
sort -u ~/.repo-autosync.list -o ~/.repo-autosync.list
echo "üìù –ü–∞–ø–∫–∞ $PWD –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞–≤—Ç–æ-—Å–ª–µ–∂–µ–Ω–∏–µ."
